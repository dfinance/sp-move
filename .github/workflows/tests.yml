name: Tests
on:
  pull_request:
  push:
    branches:
      - master

env:
  RUSTUP_MAX_RETRIES: 10
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: use required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          components: rustfmt
          override: false

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Tests
        run: cargo +${{ steps.rust.outputs.version }} test --all --no-fail-fast -- --nocapture
        env: { SKIP_WASM_BUILD: 1 }

  clippy:
    name: Clippy
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: use required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          components: clippy
          override: false

      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          name: Clippy report
          toolchain: ${{ steps.rust.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -p=sp-mvm --all-features
        env: { SKIP_WASM_BUILD: 1 }

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: use required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          target: wasm32-unknown-unknown
          override: false

      - name: Build
        run: cargo +${{ steps.rust.outputs.version }} build --all

  coverage:
    name: "Coverage"
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: cargo clean
        run: cargo clean

      - name: cargo build tests +profile
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p=sp-mvm --all-features --no-fail-fast
        env:
          SKIP_WASM_BUILD: 1
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
          RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"

      - id: coverage
        name: coverage grcov
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/grcov.yml

      - name: make artifact
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: ${{ steps.coverage.outputs.report }}

      - name: upload to Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}
